<?php

namespace backend\models;

use Yii;
use yii\helpers\FileHelper;
use yii\web\UploadedFile;
use yii\behaviors\TimestampBehavior;
/**
 * This is the model class for table "{{%phones}}".
 *
 * @property string $id
 * @property string $phone 手机号
 * @property string $province 省
 * @property string $city 市
 * @property string $area 区
 * @property string $send_num 推送数
 * @property string $see_num 查阅数
 * @property int $tags_group_id
 * @property int $status 1，成功 -1 删除
 */
class Phones extends \yii\db\ActiveRecord
{
    private $phoneFile;
    private $tags;


    const CREATE_MORE_SUCCESS = 'createAllSuccess';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%phones}}';
    }

    public static function getStatusList()
    {
        return [
            1 => '正常',
            -1 => '禁止',
        ];
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    # 创建之前
                    self::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    # 修改之前
                    self::EVENT_BEFORE_UPDATE => ['updated_at']
                ],
                #设置默认值
                'value' => time()
            ]
        ];
    }



    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['send_num', 'see_num', 'status'], 'integer'],
            [['phone'], 'string', 'max' => 11],
            [['province', 'city', 'area', 'phone', 'tags'], 'required'],
            [['province', 'city', 'area'], 'string', 'max' => 10],
            [['phone'], 'unique'],
        ];
    }

    public function afterValidate()
    {
        parent::afterValidate(); // TODO: Change the autogenerated stub
        if (!empty($this->tags)) {
            $tags = $this->tags;
            $tagsList = explode(',', $tags);
            $tagsList = array_filter($tagsList);
            if ($tagsList) {
                sort($tagsList);
                $_tags = implode(',', $tagsList);
                $sign = md5($_tags);
                $tagsGroup = TagsGroup::find()->where(['sign' => $sign])->one();
                if (!$tagsGroup) {
                    $tagsGroup = new TagsGroup();
                    $tagsGroup->sign = $sign;
                    $tagsGroup->tags = $_tags;
                    $tagsGroup->save();
                }
                foreach ($tagsList as $tagId) {
                    $tags = TagsGroupJoin::find()->where([
                        'tags_group_id' => $tagsGroup->id,
                        'tags_id' => $tagId
                    ])->one();

                    if (!$tags) {
                        $tags = new TagsGroupJoin();
                        $tags->setAttribute('tags_group_id', $tagsGroup->id);
                        $tags->setAttribute('tags_id', $tagId);
                        $tags->save();
                    }
                }
                $this->setAttribute('tags_group_id', $tagsGroup->id);
            }
        }
    }


    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'phone' => '手机号',
            'province' => '省',
            'city' => '市',
            'area' => '区',
            'send_num' => '推送数',
            'see_num' => '查阅数',
            'tags_group_id' => 'Tags Group ID',
            'status' => '1，成功 -1 删除',
        ];
    }

    /**
     * @inheritdoc
     * @return PhonesQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new PhonesQuery(get_called_class());
    }

    public function getTags()
    {
        return $this->tags;
    }

    public function setTags($tags)
    {
        return $this->tags = $tags;
    }

    public function getPhoneFile()
    {
        return $this->phoneFile;
    }

    public function setPhoneFile($value)
    {
        $this->phoneFile = $value;
        return $this;
    }

    public function upload()
    {
        if ($this->validate()) {
            $this->phoneFile->saveAs('uploads/' . $this->phoneFile->baseName . '.' . $this->phoneFile->extension);
            return true;
        } else {
            return false;
        }
    }

    public static function createMorePhone(Phones $model)
    {
        $list = [
            'insert' => [],
            'update' => [],
        ];
        $file = Yii::$app->getBasePath() . '/web/uploads/' . $model->phoneFile->name;
        if (file_exists($file)) {
            $result = file_get_contents($file);
            $result = explode("\n", $result);
            $query = self::find();
            foreach ($result as $value) {
                if (preg_match('/1\d{10}/', $value)) {
                    $phone = $query->where(['phone' => $value])->one();
                    $action = 'update';
                    if (!$phone) {
                        $phone = new self;
                    }
                    $phone->phone = $value;
                    $phone->province = $model->getAttribute('province');
                    $phone->city = $model->getAttribute('city');
                    $phone->area = $model->getAttribute('area');
                    $phone->send_num = $model->getAttribute('send_num');
                    $phone->see_num = $model->getAttribute('see_num');
                    $phone->tags_group_id = $model->getAttribute('tags_group_id');
                    if ($phone->save()) {
                        $list[$action][] = $value;
                    }

                }
            }
            @unlink($file);
        }
        return $list;
    }


    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if ($this->id) {
            $data = Yii::$app->request->post();
            if (!empty($data['PhoneUsers'])) {
                $phoneUsersModel = new PhoneUsers();
                $phoneUsersModel->load($data);
                $phoneUsersModel->phone_id = $this->id;
                $phoneUsersModel->save();
            }
        }
    }

    public function getPhoneUser()
    {
        return $this->hasOne(PhoneUsers::className(), ['phone_id' => 'id']);
    }

    public function getTagsGroup(){
        return $this->hasOne(TagsGroup::className(), ['id' => 'tags_group_id']);
    }




}
